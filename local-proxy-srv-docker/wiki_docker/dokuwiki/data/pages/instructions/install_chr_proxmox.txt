===== Установка и настройка MikroTik RouterOS CHR на Proxmox =====

==== Подготовка Proxmox к установке MikroTik CHR ====

После обычной установки PVE первым делом нужно убрать производственные репозитории. 

Файлы с репозиториями находятся в /etc/apt/source.list.d/

Там существуют два файла:

<code>
pve-enterprise.list
ceph.list
</code>

В этих файлах нужно закомментировать все, что в них находится. И добавить в файл // /etc/apt/source.list // следующее:

<code>
deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription
</code>

После этого просто обновляем пакеты:

<code bash>
apt update && apt upgrade -y
</code>

и устанавливаем нужный пакет, который пригодится для разархивирования образа диска CHR:

<code bash>
apt install zip -y
</code>

Так же сразу создадим несколько виртуальных сетевых интерфейсов. для этого переходим на веб-интерфейс Proxmox по адресу https://192.168.0.100:8006, который был указан во время [[instructions:install_proxmox|установки Proxmox]]. Переходим в раздел "Система - Сеть". Здесь будет следующие интерфейсы.

{{ :instructions:изображение_2024-03-04_113543960.png?nolink&600 |}}

Нажимаем на "Создать - Linux Bridge", оставляем все поля пустые по умолчанию. Создаться новый сетевой интерфейс, дальше нужно применить эту конфигурацию, нажав на клавишу "Применить конфигурацию". Итоговый результат показан на скриншоте.

{{ :instructions:изображение_2024-03-04_113938970.png?nolink&600 |}}

Теперь можно приступить к установке Mikrotik Cloud Hosted Router на гипервизор Proxmox.

==== Создание виртуальной машины и подготовка образа MikroTik CHR ====

Перед началом загрузки и создания шаблона виртуальной машины, необходимо для начала ее создать. Переходим в веб-интерфейс PVE
 
Создаём виртуальную машину. Задаем ей имя.

{{ :instructions:изображение_2024-03-01_172153978.png?nolink&600 |}}

Нажимаем далее и переходим в раздел выбора операционной системы и выбираем пункт //Do not use any media//. Образ системы добавим позже.

{{ :instructions:изображение_2024-03-01_172346151.png?nolink&600 |}}

Далее на вкладке //System// оставляем по умолчанию. На вкладке //Disk// удаляем диск по умолчанию.

{{ :instructions:изображение_2024-03-01_172924182.png?nolink&600 |}}

На вкладке //CPU// и //Memory// выбираем нужное количество виртуальных процессоров и количество оперативной памяти, которая будет доступная виртуальной машине.

На вкладке //Network// ставим, что не будем использовать сетевое устройство, его добавим позже.

{{ :instructions:изображение_2024-03-01_173133639.png?nolink&600 |}}

Далее подтверждаем введенную информацию. На этом этапе мы закончили создание виртуальной машины, теперь нужно загрузить необработанный образ CHR на гипервизор. Для этого нужно зайти [[https://mikrotik.com/download | сюда ]], загрузить нужную версию ОС. На момент написания, актуальная версия 7.14 Stable, ее и будем загружать. Копируем ссылку из строки **Raw disk image**.

<code>
https://download.mikrotik.com/routeros/7.14/chr-7.14.img.zip
</code>

{{ :instructions:install_chr_proxmox_download.png?nolink&600 |}} 

На Proxmox, к которому мы подключены через удаленную консоль, либо [[terms:ssh|SSH]], переходим в директорию // /var/lib/vz/images //. Здесь будет директория созданной ранее виртуальной машиной, в моем случае ее имя будет // 100 //. Если ее нет, то нужно создать этот каталог:

<code bash>
mkdir /var/lib/vz/images/100
</code>

Далее скачиваем образ CHR с помощью следующей команды:
<code bash>
wget https://download.mikrotik.com/routeros/7.14/chr-7.14.img.zip
</code>

Распаковываем архив:
<code bash>
unzip chr-7.14.img.zip
</code>

Затем конвертируем образ img в образ формата qcow2:
<code bash>
qemu-img convert -f raw  -O qcow2 chr-7.14.qcow2
</code>

У нас появится конвертированный образ системы, остается только добавить его к виртуальной машине. Так же, размер созданного диска будет размером в 40М, если этого недостаточно, его можно увеличить следующим образом:

<code bash>
qemu-img resize chr-7.14.qcow2 +1G
</code>

Теперь можно присоединить готовый образ к виртуальной машине (образ должен находится по пути // /var/lib/vz/images/100/chr-7.14.qcow2 // :

<code bash>
qm set  100 --ide2 local:100/chr-7.14.qcow2
</code>

При успешном добавлении увидим надпись **update VM 100: -ide2 local:100/chr-7.14.qcow2**.

Удаляем все временные файлы, такие как архив и необработанный образ в формате img:

<code bash>
rm chr-7.14.img chr-7.14.img.zip
</code>

Теперь мы можем возвращаться на веб-интерфейс PVE и закончить установку CHR.

==== Настройка виртуальной машины MikroTik CHR ====

Переходим в веб-интерфейс и открываю созданную ранее виртуальную машину.

{{ :instructions:изображение_2024-03-04_112727840.png?nolink&600 |}}

Во вкладке оборудование должен отобразиться раньше добавленный диск CHR. Так же не забываем добавить сетевые интерфейсы. Итоговый результат на картинке.

{{ :instructions:изображение_2024-03-04_114134610.png?nolink&600 |}}

Еще нужно удостовериться, что в случае перезагрузки самого гипервизора, CHR будет стартовать автоматически, иначе мы не сможем получить доступ к самому гипервизору.

Перед первый запуском виртуальной машины лучше сделать шаблон виртуальной машины, копируем виртуальную машину, выбираем полное клонирование.

{{ :instructions:изображение_2024-03-04_114658699.png?nolink&600 |}}

Теперь можно приступать к настройке непосредственно CHR и замене интерфейсов. Это нужно для того, что бы CHR выступал маршрутизирующим устройством, NATом, фаерволлом. Вот приблизительная как это будет выглядеть на самом деле.

{{ :instructions:default-network-setup-routed.svg |}}

На схеме видно vmbr0 - это основной интерфейс, которые создается по умолчанию при установке PVE. Так же он связан с физическим интерфейсом eno0.
VM100 будет выступать в роли маршрутизатора, значит нам нужно подменить интерфейсы таким образом: мы убираем адресацию с внешнего bridge vmbr0, далее на созданный vmbr1 назначаем адресацию непосредственно самого PVE, он будет находится на этом интерфейсе.

Для этого нужно перейти в консоль PVE, изменяем файл // /etc/network/interfaces // следующим образом.

{{ :instructions:изображение_2024-03-05_110946008.png?nolink&600 |}}. Сохраняем файл, но пока что не применяем настройки.

Далее запускаем нашу виртуальную машину, переходим в консоль и настраиваем ее. Пароль по умолчанию ** admin **, пароль **пустой**

Здесь мы назначаем пока еще не проброшенному интерфейсу ether1 внешний адрес PVE и создаем локальную адресацию для интерфейса ether2.
<code>
ip address add interfaces=ether1 address=192.168.70.12/24
ip address add interfaces=ether2 address=192.168.80.2/24
</code>

Далее отключаем правило, которое отвечает за DHCP-client, так как адресация у нас назначается вручную.

<code>
ip dhcp-client disable ether1
</code>

После этого нам нужно добавить правило NAT masquerade.

<code>
ip firewall/nat add action=masquerade out-interface=ether1 chain=srcnat
</code>

И наконец, добавляем правило глобальное правило маршрутизации к шлюзу по умолчанию.

<code>
ip route add dst-address=0.0.0.0/0 gateway=192.168.70.1 distance=1
</code>

Для проверки веденых параметров можно использовать команду **export**, которая выведет все существующие правила и настройки.

{{ :изображение_2024-03-05_112116989.png?nolink&600 |}}

На этом настройку можно считать законченной, остается только применить сетевые настройки в консоли PVE.

<code>
ifreload -a
</code>